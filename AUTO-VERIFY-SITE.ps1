# Automated Site Verification Script for Bell24H
Write-Host "üîç AUTOMATED BELL24H SITE VERIFICATION STARTING..." -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Yellow

# URLs to test
$mainSite = "https://bell24h.com"
$vercelSite = "https://bell24h-v1-qi0mgdkog-vishaals-projects-892b178d.vercel.app"

# Results array
$results = @()

Write-Host "üìä Testing Site Availability..." -ForegroundColor Cyan

# Test 1: Main Site Availability
try {
    $response = Invoke-WebRequest -Uri $mainSite -TimeoutSec 10 -UseBasicParsing
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Main site (bell24h.com) is LIVE and responding" -ForegroundColor Green
        $results += "‚úÖ Main Site: WORKING (Status: $($response.StatusCode))"
    }
    
    # Check for key HTML elements
    $content = $response.Content
    if ($content -match "Bell24H|B2B|marketplace") {
        Write-Host "‚úÖ Site content looks correct (contains B2B marketplace content)" -ForegroundColor Green
        $results += "‚úÖ Content Check: PASSED"
    } else {
        Write-Host "‚ùå Site content may be incorrect" -ForegroundColor Red
        $results += "‚ùå Content Check: FAILED"
    }
} catch {
    Write-Host "‚ùå Main site is not accessible: $($_.Exception.Message)" -ForegroundColor Red
    $results += "‚ùå Main Site: FAILED - $($_.Exception.Message)"
}

# Test 2: Vercel Site Availability
try {
    $vercelResponse = Invoke-WebRequest -Uri $vercelSite -TimeoutSec 10 -UseBasicParsing
    if ($vercelResponse.StatusCode -eq 200) {
        Write-Host "‚úÖ Vercel deployment URL is working" -ForegroundColor Green
        $results += "‚úÖ Vercel URL: WORKING (Status: $($vercelResponse.StatusCode))"
    }
} catch {
    Write-Host "‚ùå Vercel site not accessible: $($_.Exception.Message)" -ForegroundColor Red
    $results += "‚ùå Vercel URL: FAILED - $($_.Exception.Message)"
}

# Test 3: Response Time Check
Write-Host "‚è±Ô∏è Testing Response Times..." -ForegroundColor Cyan
try {
    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
    $response = Invoke-WebRequest -Uri $mainSite -TimeoutSec 30 -UseBasicParsing
    $stopwatch.Stop()
    $responseTime = $stopwatch.ElapsedMilliseconds
    
    if ($responseTime -lt 3000) {
        Write-Host "‚úÖ Fast response time: $responseTime ms" -ForegroundColor Green
        $results += "‚úÖ Speed: EXCELLENT ($responseTime ms)"
    } elseif ($responseTime -lt 5000) {
        Write-Host "‚ö†Ô∏è Moderate response time: $responseTime ms" -ForegroundColor Yellow
        $results += "‚ö†Ô∏è Speed: GOOD ($responseTime ms)"
    } else {
        Write-Host "‚ùå Slow response time: $responseTime ms" -ForegroundColor Red
        $results += "‚ùå Speed: SLOW ($responseTime ms)"
    }
} catch {
    Write-Host "‚ùå Could not measure response time" -ForegroundColor Red
    $results += "‚ùå Speed Test: FAILED"
}

# Test 4: SSL Certificate Check
Write-Host "üîí Checking SSL Certificate..." -ForegroundColor Cyan
try {
    $uri = [System.Uri]$mainSite
    $tcpClient = New-Object System.Net.Sockets.TcpClient
    $tcpClient.Connect($uri.Host, 443)
    $sslStream = New-Object System.Net.Security.SslStream($tcpClient.GetStream())
    $sslStream.AuthenticateAsClient($uri.Host)
    
    if ($sslStream.IsAuthenticated) {
        Write-Host "‚úÖ SSL Certificate is valid" -ForegroundColor Green
        $results += "‚úÖ SSL: SECURE"
    }
    
    $sslStream.Close()
    $tcpClient.Close()
} catch {
    Write-Host "‚ùå SSL Certificate issue: $($_.Exception.Message)" -ForegroundColor Red
    $results += "‚ùå SSL: ISSUE"
}

# Test 5: Check for Common React/Next.js Elements
Write-Host "‚öõÔ∏è Checking for React/Next.js Framework..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri $mainSite -TimeoutSec 10 -UseBasicParsing
    $content = $response.Content
    
    if ($content -match "_next|__NEXT_DATA__|react") {
        Write-Host "‚úÖ Next.js/React framework detected" -ForegroundColor Green
        $results += "‚úÖ Framework: Next.js/React DETECTED"
    } else {
        Write-Host "‚ö†Ô∏è Next.js/React framework not clearly detected" -ForegroundColor Yellow
        $results += "‚ö†Ô∏è Framework: Not clearly detected"
    }
} catch {
    Write-Host "‚ùå Could not check framework" -ForegroundColor Red
    $results += "‚ùå Framework Check: FAILED"
}

# Test 6: Mobile Responsiveness Check (Meta Viewport)
Write-Host "üì± Checking Mobile Responsiveness..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri $mainSite -TimeoutSec 10 -UseBasicParsing
    $content = $response.Content
    
    if ($content -match 'viewport.*width=device-width') {
        Write-Host "‚úÖ Mobile responsive meta tags found" -ForegroundColor Green
        $results += "‚úÖ Mobile: RESPONSIVE"
    } else {
        Write-Host "‚ö†Ô∏è Mobile responsive meta tags not found" -ForegroundColor Yellow
        $results += "‚ö†Ô∏è Mobile: May not be responsive"
    }
} catch {
    Write-Host "‚ùå Could not check mobile responsiveness" -ForegroundColor Red
    $results += "‚ùå Mobile Check: FAILED"
}

# Generate Final Report
Write-Host "`nüéØ AUTOMATED VERIFICATION COMPLETE!" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Yellow
Write-Host "üìã FINAL REPORT:" -ForegroundColor White

foreach ($result in $results) {
    Write-Host $result
}

# Summary
$passCount = ($results | Where-Object { $_ -match "‚úÖ" }).Count
$failCount = ($results | Where-Object { $_ -match "‚ùå" }).Count
$warnCount = ($results | Where-Object { $_ -match "‚ö†Ô∏è" }).Count

Write-Host "`nüìä SUMMARY:" -ForegroundColor White
Write-Host "‚úÖ Passed: $passCount tests" -ForegroundColor Green
Write-Host "‚ö†Ô∏è Warnings: $warnCount tests" -ForegroundColor Yellow
Write-Host "‚ùå Failed: $failCount tests" -ForegroundColor Red

if ($failCount -eq 0 -and $warnCount -le 1) {
    Write-Host "`nüéâ OVERALL STATUS: EXCELLENT! Your site is working perfectly!" -ForegroundColor Green
} elseif ($failCount -le 1) {
    Write-Host "`n‚úÖ OVERALL STATUS: GOOD! Your site is mostly working well!" -ForegroundColor Green
} else {
    Write-Host "`n‚ö†Ô∏è OVERALL STATUS: NEEDS ATTENTION! Some issues detected!" -ForegroundColor Yellow
}

# Open the site for visual inspection
Write-Host "`nüåê Opening your site for visual inspection..." -ForegroundColor Cyan
Start-Process $mainSite

Write-Host "`nPress any key to continue..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
