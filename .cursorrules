# Cursor AI Rules - Bell24h Deployment Protection

## üîí CRITICAL DEPLOYMENT PROTECTION RULES

### NEVER MODIFY OR DELETE
- **Production branches**: `main`, `production`, `master`
- **Deployment files**: `vercel.json`, `railway.json`, `.env.production`
- **Build configurations**: `next.config.js` (without explicit permission)
- **Database migrations**: Any file in `/prisma/migrations/`
- **Production APIs**: `/pages/api/` endpoints in production mode

### ALWAYS PRESERVE
1. **Environment Variables**
   - Never expose: `DATABASE_URL`, `JWT_SECRET`, `API_KEYS`
   - Always use `.env.local` for development
   - Keep `.env.production` separate and secure

2. **Deployment Configurations**
   ```
   Files to protect:
   - vercel.json
   - railway.json
   - docker-compose.yml
   - .github/workflows/*
   - netlify.toml
   ```

3. **Build Outputs**
   ```
   Never delete or modify:
   - .next/
   - .vercel/
   - dist/
   - build/
   ```

## üìÅ SAFE DEVELOPMENT PRACTICES

### Branch Strategy
```bash
# Always work in feature branches
git checkout -b feature/new-feature
# Never directly push to main
git push origin feature/new-feature
```

### File Modification Rules
1. **BEFORE modifying any file, check:**
   - Is this a deployment configuration file?
   - Will this break existing functionality?
   - Is there a test for this component?

2. **CREATE backups before major changes:**
   ```bash
   cp important-file.js important-file.backup.js
   ```

3. **USE version control markers:**
   ```javascript
   // @cursor-protected - DO NOT MODIFY
   // @production-critical
   // @deployment-config
   ```

## üö´ FORBIDDEN ACTIONS

### NEVER execute these commands without confirmation:
```bash
# Dangerous commands - require explicit user confirmation
rm -rf .next
rm -rf node_modules
git reset --hard
git push --force
npm audit fix --force
```

### NEVER modify these without backup:
- `package.json` dependencies
- `package-lock.json`
- Database schema files
- Authentication logic
- Payment processing code

## ‚úÖ REQUIRED ACTIONS

### BEFORE any deployment:
1. Run tests: `npm test`
2. Check build: `npm run build`
3. Verify environment variables
4. Create deployment backup

### WHEN creating new features:
1. Create feature branch
2. Write tests first
3. Document changes
4. Update README if needed

## üîÑ DEPLOYMENT WORKFLOW

### Local Development
```bash
# Safe local development
git checkout -b feature/your-feature
# Make changes
npm run dev
# Test thoroughly
npm test
# Build check
npm run build
```

### Staging Deployment
```bash
# Deploy to staging first
vercel --env preview
# or
railway up --environment staging
```

### Production Deployment
```bash
# Only after staging verification
# Requires explicit confirmation
vercel --prod
# or
railway up --environment production
```

## üõ°Ô∏è SECURITY RULES

### API Keys & Secrets
- NEVER hardcode secrets
- ALWAYS use environment variables
- ROTATE keys regularly
- USE different keys for dev/staging/prod

### Database Operations
- ALWAYS backup before migrations
- NEVER drop tables in production
- USE transactions for critical operations
- TEST migrations in staging first

## üìä MONITORING & ROLLBACK

### Health Checks
```javascript
// Always implement health checks
app.get('/api/health', (req, res) => {
  res.status(200).json({ status: 'healthy' });
});
```

### Rollback Strategy
```bash
# Keep previous deployments
vercel rollback [deployment-id]
# or
railway rollback
```

## üéØ CURSOR-SPECIFIC BEHAVIORS

### When asked to modify code:
1. **ASK**: "Is this a production file?"
2. **CHECK**: Current git branch
3. **VERIFY**: No breaking changes
4. **TEST**: Run tests before committing

### When dealing with deployments:
1. **NEVER** auto-deploy to production
2. **ALWAYS** deploy to staging first
3. **REQUIRE** user confirmation for production
4. **DOCUMENT** all deployment changes

## üíæ BACKUP REQUIREMENTS

### Automatic Backups
Create backups for:
- Database before migrations
- Configuration files before updates
- Environment variables (encrypted)
- Critical business logic changes

### Backup Naming Convention
```
filename.backup.YYYY-MM-DD.js
.env.backup.YYYY-MM-DD
database-backup-YYYY-MM-DD.sql
```

## üîç VERIFICATION CHECKLIST

Before ANY deployment:
- [ ] All tests passing
- [ ] Build successful
- [ ] Environment variables set
- [ ] Database migrations ready
- [ ] Staging deployment tested
- [ ] Rollback plan prepared
- [ ] Team notified
- [ ] Backup created

## ‚ö†Ô∏è WARNING TRIGGERS

Show warnings for:
- Deleting more than 10 lines of code
- Modifying authentication logic
- Changing payment processing
- Updating database schema
- Removing dependencies
- Force pushing to git

## üìù DOCUMENTATION REQUIREMENTS

Always document:
- Breaking changes
- API modifications
- Database schema changes
- New environment variables
- Deployment procedures
- Rollback procedures

## üöÄ SAFE DEPLOYMENT COMMANDS

### Vercel
```bash
# Development
vercel dev

# Preview/Staging
vercel --env preview

# Production (with confirmation)
echo "Deploying to production. Are you sure? (y/n)"
read confirm && [ "$confirm" = "y" ] && vercel --prod
```

### Railway
```bash
# Staging
railway up --environment staging

# Production (with confirmation)
echo "Deploying to production. Are you sure? (y/n)"
read confirm && [ "$confirm" = "y" ] && railway up --environment production
```

## üîê ENVIRONMENT ISOLATION

### Development (.env.local)
```
NEXT_PUBLIC_API_URL=http://localhost:3000
DATABASE_URL=postgresql://dev_user@localhost/dev_db
```

### Staging (.env.staging)
```
NEXT_PUBLIC_API_URL=https://staging.bell24h.com
DATABASE_URL=${{STAGING_DATABASE_URL}}
```

### Production (.env.production)
```
NEXT_PUBLIC_API_URL=https://bell24h.com
DATABASE_URL=${{PRODUCTION_DATABASE_URL}}
```

## üìå REMEMBER

1. **Production is sacred** - Never experiment in production
2. **Backups are mandatory** - Always have a rollback plan
3. **Testing is required** - No untested code in production
4. **Documentation is critical** - Document all changes
5. **User confirmation needed** - For all production changes

---

**These rules ensure safe, secure, and reliable deployments while preventing accidental overwrites or data loss.**
