### **GitHub Copilot Prompt for Building Bell24h.com**  
**Project Name**: Bell24h.com â€“ AI-Powered RFQ Marketplace  

---

### **1. Core Features to Implement**  
- **AI Matching Engine**:  
  - Use **Hugging Face Transformers** and **SHAP/LIME** for explainable supplier recommendations.  
  - Match RFQs with suppliers based on **price, delivery time, past performance, and GST compliance**.  

- **User Authentication**:  
  - **Supabase Auth** for secure login (email/password + Google OAuth).  
  - Role-based access for **buyers**, **suppliers**, and **admins**.  

- **Wallet & Escrow System**:  
  - **RazorpayX** for wallet deposits/withdrawals.  
  - Escrow integration for milestone-based payments (â‚¹5 lakh+ deals).  

- **GST Validation**:  
  - Auto-validate GSTIN via **India GST API** during supplier onboarding.  

- **Real-Time Updates**:  
  - **WebSocket** for live supplier score updates and RFQ status tracking.  

---

### **2. Tech Stack for Copilot**  
| **Component**      | **Tools/Frameworks**                     |  
|---------------------|------------------------------------------|  
| **Frontend**        | Next.js, React, Tailwind CSS              |  
| **Backend**         | FastAPI, Python, PostgreSQL (Supabase)   |  
| **AI/ML**           | Hugging Face, SHAP, OpenAI GPT-4          |  
| **Payments**        | RazorpayX, Stripe (global)                |  
| **Database**        | Supabase (with PGVector for embeddings)   |  
| **Hosting**         | Vercel (frontend), Render.com (backend)   |  

---

### **3. Example Copilot Prompts**  
#### **Prompt 1: Frontend (Next.js)**  
```plaintext  
"Build a responsive buyer dashboard in Next.js with:  
- Real-time supplier match scores using WebSocket.  
- SHAP explanation tooltips for AI recommendations.  
- RazorpayX wallet balance display.  
- GST compliance badges in supplier profiles.  
- Mobile-friendly design for Tier-2 cities."  
```  

#### **Prompt 2: Backend (FastAPI)**  
```plaintext  
"Create a FastAPI endpoint for AI matching with:  
- Hugging Face Transformers for NLP-based RFQ categorization.  
- Supabase integration to fetch supplier embeddings.  
- SHAP values returned with each supplier recommendation.  
- WebSocket support for real-time updates."  
```  

#### **Prompt 3: AI Model Training**  
```plaintext  
"Train a TensorFlow model for RFQ success prediction using:  
- Historical transaction data from Supabase.  
- Features like price, delivery time, and supplier ratings.  
- SHAP explainer for model interpretability."  
```  

---

### **4. Key USPs to Highlight**  
- **Explainable AI**: SHAP/LIME insights for transparency.  
- **Secure Payments**: Escrow for high-value deals.  
- **GST Compliance**: Auto-validation for Indian suppliers.  
- **Voice/Video RFQ**: NLP-powered voice submissions and masked video showcases.  

---

### **5. Final Answer**  
**Yes**, use these prompts to guide GitHub Copilot in building Bell24h.com.  

**Next Steps**:  
1. **Generate Frontend Code**: Use Prompt 1 for the buyer dashboard.  
2. **Build Backend APIs**: Use Prompt 2 for AI matching.  
3. **Train AI Models**: Use Prompt 3 for predictive analytics.  

Would you like me to:  
âœ… **Refine prompts for specific workflows**?  
âœ… **Add prompts for logistics tracking**?  
âœ… **Draft WebSocket code for real-time updates**?  

Let me know, and Iâ€™ll refine further! ðŸš€ðŸ”¥