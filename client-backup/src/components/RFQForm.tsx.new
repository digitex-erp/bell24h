/**
 * Interactive RFQ Submission Form Component
 * Allows users to create and submit RFQs with real-time validation
 * and supplier matching suggestions
 */

import React, { useState, useEffect } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { format } from 'date-fns';
import { useWebSocket } from '../hooks/use-websocket';
import { useAudio } from '../lib/audio-new';

// Form validation schema
const rfqSchema = z.object({
  title: z.string()
    .min(10, 'Title must be at least 10 characters')
    .max(100, 'Title cannot exceed 100 characters'),
  description: z.string()
    .min(50, 'Description must be at least 50 characters')
    .max(2000, 'Description cannot exceed 2000 characters'),
  budget: z.coerce.number()
    .min(100, 'Budget must be at least â‚¹100')
    .optional(),
  deadline: z.string()
    .refine(date => new Date(date) > new Date(), {
      message: 'Deadline must be in the future'
    }),
  categories: z.array(z.string())
    .min(1, 'Select at least one category'),
  attachments: z.array(z.any())
    .optional(),
  requirements: z.array(z.object({
    name: z.string().min(3, 'Requirement name is required'),
    description: z.string().optional(),
    isRequired: z.boolean().default(true),
    type: z.enum(['numeric', 'boolean', 'text', 'date', 'file']),
    min: z.number().optional(),
    max: z.number().optional(),
    options: z.array(z.string()).optional(),
  })).optional(),
});

type RFQFormValues = z.infer<typeof rfqSchema>;

// Category options
const categoryOptions = [
  { id: 'electronics', name: 'Electronics & Components' },
  { id: 'manufacturing', name: 'Manufacturing Services' },
  { id: 'logistics', name: 'Logistics & Shipping' },
  { id: 'software', name: 'Software & IT Services' },
  { id: 'consulting', name: 'Business Consulting' },
  { id: 'other', name: 'Other' },
];

interface RFQFormProps {
  onSubmit: (data: RFQFormValues) => Promise<void>;
  onCancel: () => void;
  initialData?: Partial<RFQFormValues>;
  isEdit?: boolean;
}

export const RFQForm: React.FC<RFQFormProps> = ({
  onSubmit,
  onCancel,
  initialData,
  isEdit = false,
}) => {
  // Audio hook for sound effects
  const audio = useAudio();

  // Form state
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [fileUploads, setFileUploads] = useState<File[]>([]);
  const [requirementFields, setRequirementFields] = useState<any[]>(
    initialData?.requirements || [{ name: '', description: '', isRequired: true, type: 'text' }]
  );
  const [suggestedSuppliers, setSuggestedSuppliers] = useState<any[]>([]);
  
  // WebSocket connection for real-time supplier suggestions
  const { status, sendMessage } = useWebSocket({
    url: 'ws://localhost:8080',
    onMessage: (message) => {
      if (message.type === 'supplier_suggestions') {
        setSuggestedSuppliers(message.suppliers);
      }
    }
  });

  // Initialize form with react-hook-form
  const { 
    control, 
    handleSubmit, 
    formState: { errors },
    watch,
    setValue,
    reset
  } = useForm<RFQFormValues>({
    resolver: zodResolver(rfqSchema),
    defaultValues: {
      title: initialData?.title || '',
      description: initialData?.description || '',
      budget: initialData?.budget,
      deadline: initialData?.deadline || format(new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), 'yyyy-MM-dd'),
      categories: initialData?.categories || [],
      requirements: initialData?.requirements || [],
    },
  });

  const watchedValues = watch();

  // Add a new requirement field
  const addRequirement = () => {
    audio.playSuccess(); // Play success sound when adding a requirement
    setRequirementFields([
      ...requirementFields,
      { name: '', description: '', isRequired: true, type: 'text' }
    ]);
  };

  // Remove a requirement field
  const removeRequirement = (index: number) => {
    audio.playError(); // Play error sound when removing a requirement
    const updated = [...requirementFields];
    updated.splice(index, 1);
    setRequirementFields(updated);
  };

  // Update a requirement field
  const updateRequirement = (index: number, field: string, value: any) => {
    const updated = [...requirementFields];
    updated[index] = { ...updated[index], [field]: value };
    setRequirementFields(updated);
  };

  // Handle file uploads
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const newFiles = Array.from(e.target.files);
      if (newFiles.length > 0) {
        audio.playSuccess(); // Play success sound when files are selected
      }
      setFileUploads([...fileUploads, ...newFiles]);
      setValue('attachments', [...fileUploads, ...newFiles]);
    }
  };

  // Submit form handler
  const onFormSubmit = async (data: RFQFormValues) => {
    setIsSubmitting(true);
    try {
      // Play transaction complete sound when form is submitted successfully
      audio.playTransactionComplete();
      
      // Include file uploads
      const formData = {
        ...data,
        attachments: fileUploads
      };
      
      await onSubmit(formData);
      reset(); // Reset form after successful submission
      setFileUploads([]);
      setRequirementFields([{ name: '', description: '', isRequired: true, type: 'text' }]);
    } catch (error) {
      console.error('Error submitting RFQ:', error);
      audio.playError(); // Play error sound on submission failure
    } finally {
      setIsSubmitting(false);
    }
  };

  // Play sound when suppliers are suggested
  useEffect(() => {
    if (suggestedSuppliers.length > 0) {
      audio.playMatchFound();
    }
  }, [suggestedSuppliers, audio]);

  return (
    <div className="bg-white shadow rounded-lg p-6">
      <h2 className="text-lg font-medium text-gray-900 mb-6">
        {isEdit ? 'Edit RFQ' : 'Create New RFQ'}
      </h2>
      
      <form onSubmit={handleSubmit(onFormSubmit)} className="space-y-6">
        {/* Form fields */}
        <div>
          <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
            Title
          </label>
          <Controller
            name="title"
            control={control}
            render={({ field }) => (
              <input
                {...field}
                type="text"
                id="title"
                className={`w-full px-3 py-2 border ${errors.title ? 'border-red-500' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500`}
                placeholder="Enter RFQ title"
              />
            )}
          />
          {errors.title && (
            <p className="mt-1 text-sm text-red-600">{errors.title.message}</p>
          )}
        </div>

        {/* Other form fields... */}

        {/* Form Actions */}
        <div className="flex justify-end space-x-3">
          <button
            type="button"
            onClick={() => {
              audio.playError(); // Play error sound when cancelling
              onCancel();
            }}
            className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isSubmitting}
            className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50"
          >
            {isSubmitting ? 'Submitting...' : isEdit ? 'Update RFQ' : 'Submit RFQ'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default RFQForm;
