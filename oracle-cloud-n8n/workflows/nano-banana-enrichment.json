{
  "name": "Nano Banana - Website Enrichment & Image Extraction",
  "nodes": [
    {
      "parameters": {},
      "id": "webhook",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 300],
      "webhookId": "nano-banana-enrich"
    },
    {
      "parameters": {
        "url": "={{ $json.website_url }}",
        "options": {
          "timeout": 15000,
          "followRedirects": true
        }
      },
      "id": "fetch-website",
      "name": "Fetch Website HTML",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract SEO metadata and images from HTML\nconst html = $input.first().json.body;\nconst cheerio = require('cheerio');\nconst $ = cheerio.load(html);\n\n// Extract metadata\nconst metadata = {\n  title: $('title').text() || $('meta[property=\"og:title\"]').attr('content'),\n  description: $('meta[name=\"description\"]').attr('content') || $('meta[property=\"og:description\"]').attr('content'),\n  keywords: $('meta[name=\"keywords\"]').attr('content'),\n  ogImage: $('meta[property=\"og:image\"]').attr('content'),\n};\n\n// Extract product images\nconst productImages = [];\n\n// Common product image selectors\nconst imageSelectors = [\n  '.product-image img',\n  '.product-gallery img',\n  '.product img',\n  'img[alt*=\"product\"]',\n  'img[alt*=\"Product\"]',\n  '.gallery img',\n  '.showcase img',\n  'main img',\n];\n\nimageSelectors.forEach(selector => {\n  $(selector).each((i, elem) => {\n    const src = $(elem).attr('src') || $(elem).attr('data-src');\n    const alt = $(elem).attr('alt');\n    \n    if (src && !src.includes('logo') && !src.includes('banner')) {\n      productImages.push({\n        url: src.startsWith('http') ? src : new URL(src, $json.website_url).href,\n        alt: alt || 'Product Image',\n        selector: selector\n      });\n    }\n  });\n});\n\n// Extract text content for AI analysis\nconst textContent = {\n  aboutUs: $('.about-us, #about, [class*=\"about\"]').text().slice(0, 1000),\n  products: $('.products, #products, [class*=\"product\"]').text().slice(0, 1000),\n  services: $('.services, #services, [class*=\"service\"]').text().slice(0, 1000),\n};\n\n// Extract contact information\nconst contact = {\n  email: $('a[href^=\"mailto:\"]').first().attr('href')?.replace('mailto:', ''),\n  phone: $('a[href^=\"tel:\"]').first().attr('href')?.replace('tel:', ''),\n  address: $('.address, [class*=\"address\"], [itemtype*=\"PostalAddress\"]').text(),\n};\n\nreturn {\n  metadata,\n  productImages: productImages.slice(0, 20), // Limit to 20 images\n  textContent,\n  contact,\n  scrapedAt: new Date().toISOString()\n};"
      },
      "id": "extract-data",
      "name": "Extract Images & Metadata",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "mode": "chat",
        "model": "gpt-4-turbo-preview",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are Nano Banana, a B2B data enrichment specialist. Analyze the website content and extract:\n\n1. Company type (Manufacturer/Trader/Service Provider)\n2. Main products/services (list up to 10)\n3. Industry category from this list: {{ $json.categories }}\n4. Key selling points\n5. Target market\n6. Company size estimate\n7. Quality indicators\n\nReturn structured JSON with these fields."
            },
            {
              "role": "user",
              "content": "Analyze this company website data:\n\nMetadata: {{ JSON.stringify($json.metadata) }}\n\nAbout: {{ $json.textContent.aboutUs }}\n\nProducts: {{ $json.textContent.products }}\n\nServices: {{ $json.textContent.services }}"
            }
          ]
        },
        "options": {
          "temperature": 0.3,
          "maxTokens": 1000
        }
      },
      "id": "ai-analysis",
      "name": "AI Analysis",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [900, 300],
      "credentials": {
        "openAiApi": {
          "id": "2",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Combine all enrichment data\nconst scraped = $input.all()[0].json;\nconst aiAnalysis = $input.all()[1].json;\nconst originalData = $node[\"Webhook Trigger\"].json;\n\n// Select best product images\nconst bestImages = scraped.productImages\n  .filter(img => {\n    // Filter out common non-product images\n    const url = img.url.toLowerCase();\n    return !url.includes('logo') && \n           !url.includes('banner') && \n           !url.includes('icon') &&\n           !url.includes('placeholder');\n  })\n  .slice(0, 12); // Max 12 images for product grid\n\n// Generate SEO content\nconst seoContent = {\n  metaTitle: `${originalData.company_name} - ${aiAnalysis.category} ${aiAnalysis.company_type} in ${originalData.city}`,\n  metaDescription: `${originalData.company_name} is a leading ${aiAnalysis.company_type} of ${aiAnalysis.products.slice(0, 3).join(', ')} in ${originalData.city}. ${aiAnalysis.key_selling_points?.[0] || ''}`,\n  focusKeywords: [\n    originalData.company_name,\n    aiAnalysis.category,\n    ...aiAnalysis.products.slice(0, 5),\n    originalData.city,\n    aiAnalysis.company_type\n  ].filter(Boolean)\n};\n\n// Structure enriched supplier data\nreturn {\n  // Original data\n  ...originalData,\n  \n  // Enriched business info\n  business_type: aiAnalysis.company_type,\n  business_description: aiAnalysis.description || scraped.metadata.description,\n  \n  // Category mapping\n  primary_category: aiAnalysis.category,\n  ai_classification_score: aiAnalysis.confidence || 0.85,\n  \n  // Products & services\n  ai_extracted_products: aiAnalysis.products || [],\n  ai_extracted_services: aiAnalysis.services || [],\n  \n  // Images for products\n  product_images: bestImages.map(img => ({\n    url: img.url,\n    alt: img.alt,\n    is_scraped: true\n  })),\n  \n  // Enhanced contact\n  email: originalData.email || scraped.contact.email,\n  phone: originalData.phone || scraped.contact.phone,\n  website: originalData.website_url,\n  \n  // SEO metadata\n  seo_metadata: seoContent,\n  \n  // Quality indicators\n  enrichment_score: calculateEnrichmentScore(scraped, aiAnalysis),\n  has_product_images: bestImages.length > 0,\n  \n  // Timestamps\n  enriched_at: new Date().toISOString()\n};\n\nfunction calculateEnrichmentScore(scraped, ai) {\n  let score = 0;\n  if (scraped.metadata.title) score += 10;\n  if (scraped.metadata.description) score += 10;\n  if (scraped.productImages.length > 0) score += 20;\n  if (ai.products?.length > 0) score += 20;\n  if (ai.category) score += 20;\n  if (ai.company_type) score += 10;\n  if (scraped.contact.email || scraped.contact.phone) score += 10;\n  return score;\n}"
      },
      "id": "structure-data",
      "name": "Structure Enriched Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "operation": "update",
        "table": "suppliers",
        "updateKey": "id",
        "columns": "business_type,business_description,primary_category,ai_classification_score,ai_extracted_products,ai_extracted_services,seo_metadata,enrichment_score,has_product_images,enriched_at",
        "options": {}
      },
      "id": "update-supplier",
      "name": "Update Supplier with Enrichment",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1340, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Bell24H DB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Create product records from scraped images\nconst supplier = $json;\nconst products = [];\n\n// Create products from AI extracted list\nsupplier.ai_extracted_products?.forEach((productName, index) => {\n  const productImage = supplier.product_images?.[index];\n  \n  products.push({\n    supplier_id: supplier.id,\n    product_name: productName,\n    description: `High quality ${productName} from ${supplier.company_name}`,\n    category_id: supplier.category_id,\n    image_urls: productImage ? [productImage.url] : [],\n    is_featured: index < 4, // Feature first 4 products\n    created_at: new Date().toISOString()\n  });\n});\n\nreturn products;"
      },
      "id": "create-products",
      "name": "Create Product Records",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 450]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "supplier_products",
        "columns": "supplier_id,product_name,description,category_id,image_urls,is_featured,created_at",
        "options": {
          "onConflict": {
            "columns": ["supplier_id", "product_name"],
            "updateColumns": ["image_urls", "updated_at"]
          }
        }
      },
      "id": "insert-products",
      "name": "Insert Products",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1560, 450],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Bell24H DB"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "respond",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Fetch Website HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Website HTML": {
      "main": [
        [
          {
            "node": "Extract Images & Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Images & Metadata": {
      "main": [
        [
          {
            "node": "AI Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Analysis": {
      "main": [
        [
          {
            "node": "Structure Enriched Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structure Enriched Data": {
      "main": [
        [
          {
            "node": "Update Supplier with Enrichment",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Product Records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Supplier with Enrichment": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Product Records": {
      "main": [
        [
          {
            "node": "Insert Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "nano-banana-v1",
  "id": "nano-banana-enrichment",
  "tags": ["bell24h", "enrichment", "nano-banana", "seo"]
}
