version: '3.8'

services:
  # BELL24H Application
  bell24h-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bell24h-app
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://bell24h:password@bell24h-db:5432/bell24h
      - REDIS_URL=redis://bell24h-redis:6379
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-super-secret-key-change-in-production
    depends_on:
      - bell24h-db
      - bell24h-redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - bell24h-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  bell24h-db:
    image: postgres:15-alpine
    container_name: bell24h-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=bell24h
      - POSTGRES_USER=bell24h
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma:/docker-entrypoint-initdb.d
    ports:
      - '5432:5432'
    networks:
      - bell24h-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U bell24h -d bell24h']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  bell24h-redis:
    image: redis:7-alpine
    container_name: bell24h-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - bell24h-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  bell24h-nginx:
    image: nginx:alpine
    container_name: bell24h-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - bell24h-app
    networks:
      - bell24h-network
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  bell24h-prometheus:
    image: prom/prometheus:latest
    container_name: bell24h-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - bell24h-network

  # Monitoring - Grafana
  bell24h-grafana:
    image: grafana/grafana:latest
    container_name: bell24h-grafana
    restart: unless-stopped
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - bell24h-prometheus
    networks:
      - bell24h-network

  # Backup Service
  bell24h-backup:
    image: postgres:15-alpine
    container_name: bell24h-backup
    restart: 'no'
    environment:
      - POSTGRES_DB=bell24h
      - POSTGRES_USER=bell24h
      - POSTGRES_PASSWORD=password
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data:ro
    command: >
      sh -c "
        pg_dump -h bell24h-db -U bell24h -d bell24h > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        echo 'Backup completed'
      "
    depends_on:
      - bell24h-db
    networks:
      - bell24h-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  bell24h-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
