#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('‚ò¢Ô∏è BELL24H NUCLEAR CLEANUP');
console.log('===========================');

// Function to recursively find all TypeScript/JavaScript files
function findTsJsFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory() && !['node_modules', '.next', 'dist', 'build'].includes(file)) {
      findTsJsFiles(filePath, fileList);
    } else if (file.match(/\.(ts|tsx|js|jsx)$/)) {
      fileList.push(filePath);
    }
  });
  
  return fileList;
}

// Function to clean ALL problematic imports
function nuclearClean(filePath) {
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;
  
  // COMPREHENSIVE ICON MAPPINGS
  const iconMappings = {
    'Search': 'üîç', 'User': 'üë§', 'Users': 'üë•', 'Mail': 'üìß', 'Phone': 'üìû',
    'Lock': 'üîí', 'Eye': 'üëÅÔ∏è', 'EyeOff': 'üôà', 'Bell': 'üîî', 'Settings': '‚öôÔ∏è',
    'LogOut': 'üö™', 'Home': 'üè†', 'Star': '‚≠ê', 'Heart': '‚ù§Ô∏è', 'Plus': '‚ûï',
    'Minus': '‚ûñ', 'Check': '‚úÖ', 'X': '‚ùå', 'ChevronRight': '‚ñ∂Ô∏è', 'ChevronLeft': '‚óÄÔ∏è',
    'ArrowRight': '‚Üí', 'ArrowLeft': '‚Üê', 'ArrowUp': '‚Üë', 'ArrowDown': '‚Üì',
    'Calendar': 'üìÖ', 'Clock': 'üïê', 'MapPin': 'üìç', 'Globe': 'üåç', 'Shield': 'üõ°Ô∏è',
    'Zap': '‚ö°', 'Truck': 'üöö', 'Package': 'üì¶', 'ShoppingCart': 'üõí', 'CreditCard': 'üí≥',
    'DollarSign': '$', 'TrendingUp': 'üìà', 'TrendingDown': 'üìâ', 'BarChart': 'üìä',
    'BarChart3': 'üìä', 'PieChart': 'ü•ß', 'Activity': 'üìä', 'Download': '‚¨áÔ∏è',
    'Upload': '‚¨ÜÔ∏è', 'File': 'üìÑ', 'Folder': 'üìÅ', 'Image': 'üñºÔ∏è', 'Video': 'üé•',
    'Music': 'üéµ', 'Mic': 'üé§', 'Camera': 'üì∑', 'Edit': '‚úèÔ∏è', 'Trash': 'üóëÔ∏è',
    'Save': 'üíæ', 'Copy': 'üìã', 'Share': 'üì§', 'Link': 'üîó', 'ExternalLink': 'üîó',
    'Menu': '‚ò∞', 'MoreHorizontal': '‚ãØ', 'MoreVertical': '‚ãÆ', 'Grid': '‚ñ¶', 'List': '‚ò∞',
    'Filter': 'üîΩ', 'Sort': 'üîÄ', 'Refresh': 'üîÑ', 'Power': '‚ö°', 'Wifi': 'üì∂',
    'Battery': 'üîã', 'Volume': 'üîä', 'Play': '‚ñ∂Ô∏è', 'Pause': '‚è∏Ô∏è', 'Stop': '‚èπÔ∏è',
    'FastForward': '‚è©', 'Rewind': '‚è™', 'SkipForward': '‚è≠Ô∏è', 'SkipBack': '‚èÆÔ∏è',
    'Calculator': 'üßÆ', 'Building': 'üè¢', 'AlertTriangle': '‚ö†Ô∏è', 'AlertCircle': '‚ö†Ô∏è',
    'Info': '‚ÑπÔ∏è', 'Percent': '%', 'Target': 'üéØ', 'Briefcase': 'üíº', 'CheckCircle': '‚úÖ',
    'Sparkles': '‚ú®', 'Target': 'üéØ', 'Home': 'üè†', 'DollarSign': '$', 'Percent': '%',
    'Calculator': 'üßÆ', 'Building': 'üè¢', 'AlertTriangle': '‚ö†Ô∏è', 'AlertCircle': '‚ö†Ô∏è',
    'Info': '‚ÑπÔ∏è', 'Briefcase': 'üíº', 'Sparkles': '‚ú®', 'Target': 'üéØ'
  };
  
  // Remove ALL lucide-react imports
  if (content.includes('lucide-react')) {
    console.log(`‚ò¢Ô∏è Nuclear fixing lucide-react in: ${filePath}`);
    
    // Remove import statements
    content = content.replace(/import\s+{[^}]*}\s+from\s+['"]lucide-react['"];?\n?/g, '');
    content = content.replace(/import\s+\*\s+as\s+\w+\s+from\s+['"]lucide-react['"];?\n?/g, '');
    
    // Replace ALL icon components with emojis
    Object.entries(iconMappings).forEach(([iconName, emoji]) => {
      const iconRegex = new RegExp(`<${iconName}[^>]*\\/>`, 'g');
      content = content.replace(iconRegex, `<span>${emoji}</span>`);
      
      const iconWithPropsRegex = new RegExp(`<${iconName}[^>]*>.*?<\\/${iconName}>`, 'g');
      content = content.replace(iconWithPropsRegex, `<span>${emoji}</span>`);
    });
    
    modified = true;
  }
  
  // Remove ALL next-auth imports and replace useSession
  if (content.includes('next-auth') || content.includes('useSession')) {
    console.log(`‚ò¢Ô∏è Nuclear fixing next-auth in: ${filePath}`);
    
    // Remove next-auth imports
    content = content.replace(/import[^;]*next-auth[^;]*;?\n?/g, '');
    content = content.replace(/import[^;]*@auth\/[^;]*;?\n?/g, '');
    
    // Replace useSession with mock
    content = content.replace(/const\s+{\s*session\s*}\s*=\s*useSession\(\)/g, 'const session = { user: { id: "demo", email: "demo@bell24h.com", name: "Demo User" } }');
    content = content.replace(/useSession\(\)/g, '() => ({ data: { user: { id: "demo", email: "demo@bell24h.com", name: "Demo User" } }, status: "authenticated" })');
    
    modified = true;
  }
  
  // Remove ALL other problematic imports
  const problematicImports = [
    '@mui/icons-material',
    '@radix-ui',
    'razorpay',
    'jspdf',
    'chart.js',
    'prisma'
  ];
  
  problematicImports.forEach(importName => {
    if (content.includes(importName)) {
      console.log(`‚ò¢Ô∏è Nuclear fixing ${importName} in: ${filePath}`);
      content = content.replace(new RegExp(`import[^;]*${importName.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}[^;]*;?\n?`, 'g'), '');
      modified = true;
    }
  });
  
  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ Nuclear fixed: ${filePath}`);
  }
}

// Nuclear clean all files
const srcFiles = findTsJsFiles('./src');
console.log(`\n‚ò¢Ô∏è Found ${srcFiles.length} files for nuclear cleanup...`);

srcFiles.forEach(nuclearClean);

console.log('\n‚ò¢Ô∏è NUCLEAR CLEANUP COMPLETE!');
