#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üßπ BELL24H DEPLOYMENT CLEANUP');
console.log('==============================');

// Function to recursively find all TypeScript/JavaScript files
function findTsJsFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);

  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory() && !['node_modules', '.next', 'dist', 'build'].includes(file)) {
      findTsJsFiles(filePath, fileList);
    } else if (file.match(/\.(ts|tsx|js|jsx)$/)) {
      fileList.push(filePath);
    }
  });

  return fileList;
}

// Function to clean problematic imports
function cleanImports(filePath) {
  let content = fs.readFileSync(filePath, 'utf8');
  let modified = false;

  // Remove lucide-react imports and replace with emojis
  if (content.includes('lucide-react')) {
    console.log(`üîß Fixing lucide-react in: ${filePath}`);

    // Common icon mappings
    const iconMappings = {
      Search: 'üîç',
      User: 'üë§',
      Users: 'üë•',
      Mail: 'üìß',
      Phone: 'üìû',
      Lock: 'üîí',
      Eye: 'üëÅÔ∏è',
      EyeOff: 'üôà',
      Bell: 'üîî',
      Settings: '‚öôÔ∏è',
      LogOut: 'üö™',
      Home: 'üè†',
      Star: '‚≠ê',
      Heart: '‚ù§Ô∏è',
      Plus: '‚ûï',
      Minus: '‚ûñ',
      Check: '‚úÖ',
      X: '‚ùå',
      ChevronRight: '‚ñ∂Ô∏è',
      ChevronLeft: '‚óÄÔ∏è',
      ArrowRight: '‚Üí',
      ArrowLeft: '‚Üê',
      ArrowUp: '‚Üë',
      ArrowDown: '‚Üì',
      Calendar: 'üìÖ',
      Clock: 'üïê',
      MapPin: 'üìç',
      Globe: 'üåç',
      Shield: 'üõ°Ô∏è',
      Zap: '‚ö°',
      Truck: 'üöö',
      Package: 'üì¶',
      ShoppingCart: 'üõí',
      CreditCard: 'üí≥',
      DollarSign: '$',
      TrendingUp: 'üìà',
      TrendingDown: 'üìâ',
      BarChart: 'üìä',
      PieChart: 'ü•ß',
      Activity: 'üìä',
      Download: '‚¨áÔ∏è',
      Upload: '‚¨ÜÔ∏è',
      File: 'üìÑ',
      Folder: 'üìÅ',
      Image: 'üñºÔ∏è',
      Video: 'üé•',
      Music: 'üéµ',
      Mic: 'üé§',
      Camera: 'üì∑',
      Edit: '‚úèÔ∏è',
      Trash: 'üóëÔ∏è',
      Save: 'üíæ',
      Copy: 'üìã',
      Share: 'üì§',
      Link: 'üîó',
      ExternalLink: 'üîó',
      Menu: '‚ò∞',
      MoreHorizontal: '‚ãØ',
      MoreVertical: '‚ãÆ',
      Grid: '‚ñ¶',
      List: '‚ò∞',
      Filter: 'üîΩ',
      Sort: 'üîÄ',
      Refresh: 'üîÑ',
      Power: '‚ö°',
      Wifi: 'üì∂',
      Battery: 'üîã',
      Volume: 'üîä',
      Play: '‚ñ∂Ô∏è',
      Pause: '‚è∏Ô∏è',
      Stop: '‚èπÔ∏è',
      FastForward: '‚è©',
      Rewind: '‚è™',
      SkipForward: '‚è≠Ô∏è',
      SkipBack: '‚èÆÔ∏è',
    };

    // Remove import statements
    content = content.replace(/import\s+{[^}]*}\s+from\s+['"]lucide-react['"];?\n?/g, '');
    content = content.replace(/import\s+\*\s+as\s+\w+\s+from\s+['"]lucide-react['"];?\n?/g, '');

    // Replace icon components with emojis
    Object.entries(iconMappings).forEach(([iconName, emoji]) => {
      const iconRegex = new RegExp(`<${iconName}[^>]*\\/>`, 'g');
      content = content.replace(iconRegex, `<span>${emoji}</span>`);

      const iconWithPropsRegex = new RegExp(`<${iconName}[^>]*>.*?<\\/${iconName}>`, 'g');
      content = content.replace(iconWithPropsRegex, `<span>${emoji}</span>`);
    });

    modified = true;
  }

  // Remove next-auth imports
  if (content.includes('next-auth')) {
    console.log(`üîß Fixing next-auth in: ${filePath}`);
    content = content.replace(/import[^;]*next-auth[^;]*;?\n?/g, '');
    content = content.replace(/import[^;]*@auth\/[^;]*;?\n?/g, '');
    modified = true;
  }

  // Remove @mui/icons-material imports
  if (content.includes('@mui/icons-material')) {
    console.log(`üîß Fixing @mui/icons-material in: ${filePath}`);
    content = content.replace(/import[^;]*@mui\/icons-material[^;]*;?\n?/g, '');
    modified = true;
  }

  // Remove @radix-ui imports
  if (content.includes('@radix-ui')) {
    console.log(`üîß Fixing @radix-ui in: ${filePath}`);
    content = content.replace(/import[^;]*@radix-ui[^;]*;?\n?/g, '');
    modified = true;
  }

  // Remove razorpay imports
  if (content.includes('razorpay')) {
    console.log(`üîß Fixing razorpay in: ${filePath}`);
    content = content.replace(/import[^;]*razorpay[^;]*;?\n?/g, '');
    modified = true;
  }

  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ Fixed: ${filePath}`);
  }
}

// Clean all files in src directory
const srcFiles = findTsJsFiles('./src');
console.log(`\nüîç Found ${srcFiles.length} files to check...`);

srcFiles.forEach(cleanImports);

console.log('\n‚úÖ CLEANUP COMPLETE!');
