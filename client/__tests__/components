/**
 * Bell24H Homepage Comprehensive Test Suite
 * Tests all page functionality, content, navigation, and features
 */

import React from 'react';
import { render, screen, fireEvent, waitFor, within } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import HomePage from '@/app/page';

// Mock Next.js router and navigation
jest.mock('next/navigation', () => ({
  useRouter: () => ({
    push: jest.fn(),
    replace: jest.fn(),
    back: jest.fn(),
    forward: jest.fn(),
    refresh: jest.fn(),
    prefetch: jest.fn(),
  }),
  usePathname: () => '/',
  useSearchParams: () => new URLSearchParams(),
}));

// Mock window.templeBellSound for bell functionality
Object.defineProperty(window, 'templeBellSound', {
  value: {
    playBellSound: jest.fn().mockResolvedValue(undefined),
    isAudioSupported: jest.fn().mockReturnValue(true),
  },
  writable: true,
});

describe('Bell24H Homepage - Comprehensive Testing', () => {
  const user = userEvent.setup();

  beforeEach(() => {
    // Reset all mocks before each test
    jest.clearAllMocks();
    
    // Mock window.location.href
    Object.defineProperty(window, 'location', {
      value: { href: 'http://localhost:3000' },
      writable: true,
    });
  });

  describe('Page Loading and Basic Functionality', () => {
    test('page loads successfully without errors', async () => {
      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      
      render(<HomePage />);
      
      // Check that no console errors occurred during rendering
      expect(consoleSpy).not.toHaveBeenCalled();
      
      consoleSpy.mockRestore();
    });

    test('page has content and is not blank', () => {
      render(<HomePage />);
      
      // Check for main content elements
      expect(screen.getByRole('main') || document.body).toBeInTheDocument();
      expect(document.body.textContent).not.toBe('');
      expect(document.body.textContent!.length).toBeGreaterThan(100);
    });

    test('page title and meta information are correct', () => {
      render(<HomePage />);
      
      // Check for Bell24H branding
      expect(screen.getByText('Bell24H')).toBeInTheDocument();
      expect(screen.getByText(/India's Most Trusted/i)).toBeInTheDocument();
      expect(screen.getByText(/B2B Marketplace/i)).toBeInTheDocument();
    });

    test('page is responsive - key elements adapt to different viewports', () => {
      render(<HomePage />);
      
      // Check for responsive navigation elements
      const navigation = screen.getByRole('banner') || screen.getByRole('navigation');
      expect(navigation).toBeInTheDocument();
      
      // Check for main call-to-action buttons
      expect(screen.getByText(/Start Free Trial/i)).toBeInTheDocument();
    });
  });

  describe('Bell Sound System Testing', () => {
    test('bell icon is present and clickable', () => {
      render(<HomePage />);
      
      const bellIcon = screen.getAllByRole('button').find(button => 
        button.innerHTML.includes('Bell') || 
        button.querySelector('[data-icon="bell"]') ||
        button.title?.toLowerCase().includes('bell')
      );
      
      expect(bellIcon).toBeTruthy();
    });

    test('sound toggle functionality works', async () => {
      render(<HomePage />);
      
      // Find sound toggle button
      const soundToggle = screen.getAllByRole('button').find(button => 
        button.title?.toLowerCase().includes('sound') || 
        button.title?.toLowerCase().includes('bell') ||
        button.innerHTML.includes('Volume')
      );
      
      if (soundToggle) {
        await user.click(soundToggle);
        
        // Check that templeBellSound was called if sound is enabled
        await waitFor(() => {
          expect(window.templeBellSound?.playBellSound || jest.fn()).toHaveBeenCalledTimes(0);
        });
      }
    });

    test('bell sound initialization script loading', () => {
      render(<HomePage />);
      
      // Check that the component attempts to load bell sound script
      const scripts = document.querySelectorAll('script');
      const hasAudioElements = document.querySelectorAll('audio').length > 0;
      
      // Either script tags are added or audio elements exist
      expect(scripts.length >= 0 || hasAudioElements).toBe(true);
    });
  });

  describe('Navigation and Header Testing', () => {
    test('main navigation links are present and functional', () => {
      render(<HomePage />);
      
      // Check for key navigation links
      const navigationLinks = [
        'Categories',
        'Voice RFQ', 
        'AI Dashboard',
        'Sign In',
        'Start Free Trial'
      ];
      
      navigationLinks.forEach(linkText => {
        const link = screen.getByText(linkText);
        expect(link).toBeInTheDocument();
        expect(link.closest('a, button')).toBeTruthy();
      });
    });

    test('country selector is functional', async () => {
      render(<HomePage />);
      
      // Find country selector dropdown
      const countrySelector = screen.getByDisplayValue(/ğŸ‡®ğŸ‡³.*India/i) || 
                             screen.getByRole('combobox') ||
                             screen.getAllByRole('button').find(btn => 
                               btn.textContent?.includes('ğŸ‡®ğŸ‡³') || 
                               btn.textContent?.includes('India')
                             );
      
      if (countrySelector) {
        expect(countrySelector).toBeInTheDocument();
        
        // Test interaction
        await user.click(countrySelector);
        
        // Should not throw errors
        expect(countrySelector).toBeInTheDocument();
      }
    });

    test('logo and branding elements are present', () => {
      render(<HomePage />);
      
      // Check for Bell24H logo and branding
      expect(screen.getByText('Bell24H')).toBeInTheDocument();
      expect(screen.getByText(/The Global B2B Operating System/i)).toBeInTheDocument();
    });
  });

  describe('AI-Powered Search Functionality', () => {
    test('search form is present and functional', async () => {
      render(<HomePage />);
      
      // Find search input
      const searchInput = screen.getByPlaceholderText(/What are you looking for/i);
      expect(searchInput).toBeInTheDocument();
      
      // Find category selector
      const categorySelect = screen.getByDisplayValue('All Categories') ||
                            screen.getAllByRole('combobox').find(select => 
                              select.textContent?.includes('Categories')
                            );
      expect(categorySelect).toBeInTheDocument();
      
      // Find search button
      const searchButton = screen.getByText(/AI Search/i) || 
                          screen.getByRole('button', { name: /search/i });
      expect(searchButton).toBeInTheDocument();
    });

    test('search input accepts text and triggers search', async () => {
      render(<HomePage />);
      
      const searchInput = screen.getByPlaceholderText(/What are you looking for/i);
      const searchButton = screen.getByText(/AI Search/i);
      
      // Type in search input
      await user.type(searchInput, 'Industrial Machinery');
      expect(searchInput).toHaveValue('Industrial Machinery');
      
      // Click search button
      await user.click(searchButton);
      
      // Should not throw errors and may show loading state
      expect(searchButton).toBeInTheDocument();
    });

    test('category selection works correctly', async () => {
      render(<HomePage />);
      
      const categorySelect = screen.getByDisplayValue('All Categories') ||
                            screen.getAllByRole('combobox')[0];
      
      if (categorySelect) {
        await user.click(categorySelect);
        
        // Should show category options
        expect(categorySelect).toBeInTheDocument();
      }
    });

    test('AI feature links are present and functional', () => {
      render(<HomePage />);
      
      // Check for AI feature links
      const aiFeatures = [
        'Voice RFQ',
        'AI Analytics', 
        'Predictive Analytics'
      ];
      
      aiFeatures.forEach(feature => {
        const link = screen.getByText(feature);
        expect(link).toBeInTheDocument();
        expect(link.closest('a, button')).toBeTruthy();
      });
    });
  });

  describe('Statistics and Data Display', () => {
    test('platform statistics are displayed correctly', () => {
      render(<HomePage />);
      
      // Check for key statistics
      const stats = [
        '534,281+', // Verified Suppliers
        '50+',      // Active Categories  
        '125,000+', // Monthly RFQs
        '98.5%'     // Success Rate
      ];
      
      stats.forEach(stat => {
        expect(screen.getByText(stat)).toBeInTheDocument();
      });
    });

    test('feature highlights and values are shown', () => {
      render(<HomePage />);
      
      // Check for enterprise value highlights
      expect(screen.getByText(/â‚¹1\.75L/i)).toBeInTheDocument();
      expect(screen.getByText(/Monthly Enterprise/i)).toBeInTheDocument();
      
      // Check for accuracy highlights
      expect(screen.getByText(/98\.5%.*Accuracy/i)).toBeInTheDocument();
    });
  });

  describe('Categories Section Testing', () => {
    test('featured categories are displayed', () => {
      render(<HomePage />);
      
      // Check for category section
      expect(screen.getByText(/Explore.*Categories/i)).toBeInTheDocument();
      
      // Check for sample categories
      const categories = ['Electronics', 'Agriculture', 'Automobile'];
      categories.forEach(category => {
        expect(screen.getByText(category)).toBeInTheDocument();
      });
    });

    test('category cards are clickable and have supplier counts', async () => {
      render(<HomePage />);
      
      // Find category cards
      const categoryCards = screen.getAllByText(/suppliers/).map(el => el.closest('a, button')).filter(Boolean);
      
      expect(categoryCards.length).toBeGreaterThan(0);
      
      // Test clicking first category card
      if (categoryCards[0]) {
        await user.click(categoryCards[0]);
        // Should not throw errors
        expect(categoryCards[0]).toBeInTheDocument();
      }
    });

    test('view all categories link is present', () => {
      render(<HomePage />);
      
      const viewAllLink = screen.getByText(/View All Categories/i);
      expect(viewAllLink).toBeInTheDocument();
      expect(viewAllLink.closest('a')).toBeTruthy();
    });
  });

  describe('Call-to-Action Buttons Testing', () => {
    test('primary CTA buttons are present and functional', async () => {
      render(<HomePage />);
      
      // Find all "Start Free Trial" buttons
      const ctaButtons = screen.getAllByText(/Start Free Trial/i);
      expect(ctaButtons.length).toBeGreaterThan(0);
      
      // Test clicking primary CTA
      await user.click(ctaButtons[0]);
      
      // Should not throw errors
      expect(ctaButtons[0]).toBeInTheDocument();
    });

    test('secondary action buttons work', async () => {
      render(<HomePage />);
      
      // Find demo/secondary buttons
      const demoButton = screen.getByText(/Watch Demo/i) || 
                        screen.getByText(/Experience AI Dashboard/i);
      
      if (demoButton) {
        await user.click(demoButton);
        expect(demoButton).toBeInTheDocument();
      }
    });

    test('ring the bell CTA is prominent', () => {
      render(<HomePage />);
      
      const bellCTA = screen.getByText(/Ring the Bell/i);
      expect(bellCTA).toBeInTheDocument();
      expect(bellCTA.closest('a, button')).toBeTruthy();
    });
  });

  describe('Features Section Testing', () => {
    test('key platform features are highlighted', () => {
      render(<HomePage />);
      
      // Check for feature titles
      const features = [
        'AI-Powered Matching',
        'Verified Suppliers', 
        '24/7 Operations',
        'Pan-India Reach'
      ];
      
      features.forEach(feature => {
        expect(screen.getByText(feature)).toBeInTheDocument();
      });
    });

    test('feature descriptions and highlights are present', () => {
      render(<HomePage />);
      
      // Check for feature highlights
      expect(screen.getByText(/98\.5%.*Accuracy/i)).toBeInTheDocument();
      expect(screen.getByText(/100%.*Verified/i)).toBeInTheDocument();
      expect(screen.getByText(/24x7.*Active/i)).toBeInTheDocument();
    });
  });

  describe('Footer Testing', () => {
    test('footer contains all necessary links and information', () => {
      render(<HomePage />);
      
      // Check for footer sections
      expect(screen.getByText(/Platform/i)).toBeInTheDocument();
      expect(screen.getByText(/Company/i)).toBeInTheDocument();
      expect(screen.getByText(/Support/i)).toBeInTheDocument();
      
      // Check for copyright
      expect(screen.getByText(/Â© 2024 Bell24H Global/i)).toBeInTheDocument();
    });

    test('footer links are functional', () => {
      render(<HomePage />);
      
      // Check for key footer links
      const footerLinks = ['About Us', 'Contact', 'Privacy Policy', 'Terms of Service'];
      
      footerLinks.forEach(linkText => {
        const link = screen.getByText(linkText);
        expect(link).toBeInTheDocument();
        expect(link.closest('a')).toBeTruthy();
      });
    });
  });

  describe('Accessibility Testing', () => {
    test('page has proper semantic structure', () => {
      render(<HomePage />);
      
      // Check for proper heading hierarchy
      const h1Elements = screen.getAllByRole('heading', { level: 1 });
      expect(h1Elements.length).toBeGreaterThan(0);
      
      // Check for navigation landmarks
      const navigation = screen.getByRole('banner') || document.querySelector('nav');
      expect(navigation).toBeTruthy();
    });

    test('interactive elements are keyboard accessible', async () => {
      render(<HomePage />);
      
      // Check that buttons can receive focus
      const buttons = screen.getAllByRole('button');
      
      if (buttons.length > 0) {
        buttons[0].focus();
        expect(document.activeElement).toBe(buttons[0]);
      }
    });

    test('images have proper alt text', () => {
      render(<HomePage />);
      
      const images = screen.getAllByRole('img');
      images.forEach(img => {
        expect(img).toHaveAttribute('alt');
      });
    });
  });

  describe('Performance and Error Handling', () => {
    test('page handles missing audio gracefully', () => {
      // Mock audio failure
      const originalAudio = window.Audio;
      window.Audio = jest.fn().mockImplementation(() => {
        throw new Error('Audio not supported');
      });
      
      expect(() => render(<HomePage />)).not.toThrow();
      
      // Restore original Audio
      window.Audio = originalAudio;
    });

    test('page handles network errors gracefully', async () => {
      // Mock fetch failure
      global.fetch = jest.fn().mockRejectedValue(new Error('Network error'));
      
      expect(() => render(<HomePage />)).not.toThrow();
      
      // Restore fetch
      global.fetch = jest.fn();
    });

    test('loading states are handled properly', async () => {
      render(<HomePage />);
      
      // Find search button and trigger loading state
      const searchButton = screen.getByText(/AI Search/i);
      await user.click(searchButton);
      
      // Page should still be functional during loading
      expect(searchButton).toBeInTheDocument();
    });
  });

  describe('Business Logic Testing', () => {
    test('enterprise value calculation display', () => {
      render(<HomePage />);
      
      // Check for value propositions
      expect(screen.getByText(/â‚¹1\.75L/i)).toBeInTheDocument();
      expect(screen.getByText(/Monthly Enterprise Value/i)).toBeInTheDocument();
    });

    test('supplier count and statistics accuracy', () => {
      render(<HomePage />);
      
      // Verify key business metrics
      expect(screen.getByText('534,281+')).toBeInTheDocument();
      expect(screen.getByText('98.5%')).toBeInTheDocument();
      expect(screen.getByText('125,000+')).toBeInTheDocument();
    });

    test('AI accuracy claims are prominent', () => {
      render(<HomePage />);
      
      // Check for AI accuracy highlights
      const accuracyElements = screen.getAllByText(/98\.5%/i);
      expect(accuracyElements.length).toBeGreaterThan(0);
      
      // Check for AI-related content
      expect(screen.getByText(/AI-Powered/i)).toBeInTheDocument();
    });
  });
}); 