import { NextRequest, NextResponse } from 'next/server';
import { writeFile } from 'fs/promises';
import { join } from 'path';

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const file = formData.get('file') as File;
    
    if (!file) {
      return NextResponse.json(
        { success: false, message: 'No video file provided' },
        { status: 400 }
      );
    }

    // Validate file type
    if (!file.type.startsWith('video/')) {
      return NextResponse.json(
        { success: false, message: 'Invalid file type. Only video files are allowed.' },
        { status: 400 }
      );
    }

    // Validate file size (max 100MB)
    const maxSize = 100 * 1024 * 1024; // 100MB
    if (file.size > maxSize) {
      return NextResponse.json(
        { success: false, message: 'File size too large. Maximum size is 100MB.' },
        { status: 400 }
      );
    }

    // Generate unique filename
    const timestamp = Date.now();
    const filename = `video_${timestamp}_${file.name}`;
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    // Save to temporary directory (in production, use cloud storage)
    const uploadDir = join(process.cwd(), 'public', 'uploads', 'videos');
    const filepath = join(uploadDir, filename);
    
    await writeFile(filepath, buffer);

    // Return success response
    return NextResponse.json({
      success: true,
      message: 'Video uploaded successfully',
      filename: filename,
      url: `/uploads/videos/${filename}`,
      size: file.size,
      type: file.type,
      duration: null, // Will be extracted by video processing service
      thumbnail: null, // Will be generated by video processing service
      uploadTime: new Date().toISOString()
    });

  } catch (error) {
    console.error('Video upload error:', error);
    return NextResponse.json(
      { success: false, message: 'Failed to upload video' },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Video upload endpoint is working',
    maxFileSize: '100MB',
    supportedFormats: ['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'],
    uploadPath: '/api/video/upload'
  });
} 